# -*- coding: utf-8 -*-
"""Quest: Escape Room(IF).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qJ_fxphCIonQY_Of2DIdJDgUmia2czTH
"""

# define rooms and items

couch = {
    "name": "couch",
    "type": "furniture",
}

door_a = {
    "name": "door a",
    "type": "door",
}

key_a = {
    "name": "key for door a",
    "type": "key",
    "target": door_a,
}

piano = {
    "name": "piano",
    "type": "furniture",
}

saloon_deck = { ##
    "name": "saloon deck",
    "type": "room",
}

shelter_deck = {##
     "name" : "shelter deck",
     "type" : "room",
 }


main_cabin = { ##
     "name" : "main cabin",
     "type" : "room",
 }

bench = { ##
     "name" : "bench",
     "type" : "furniture",
 }

door_b = {
    "name": "door b",
    "type": "door",
}


key_b = {
    "name": "key for door b",
    "type": "key",
    "target": door_b,
 }

door_c = {
     "name": "door c",
    "type": "door",

 }
outside = {
  "name": "outside"
}

double_bed = {
    "name": "double bed",
    "type": "furniture",
}

dresser = {
    "name": "dresser",
    "type": "furniture",
}

key_c = {
    "name": "key for door c",
    "type": "key",
    "target": door_c,
}


dinghy ={ ##before it was door d
    "name": "dinghy",
    "type": "door",

}


key_dinghy = { ## before it was key to door d
    "name": "key for the dinghy",
    "type": "key",
    "target": dinghy,
}

boat_deck = {##
     "name" : "boat deck",
     "type" : "room",
}

dining_table = {
    "name": "dining table",
    "type": "furniture",
}


outside = {

      "name" : "outside"
}

##end of all items definition

all_rooms = [saloon_deck, shelter_deck , main_cabin, boat_deck, outside]

all_doors = [door_a, door_b, door_c, dinghy]

# define which items/rooms are related

object_relations = {
    "saloon deck":[couch, piano, door_a],
    "shelter deck":[door_a, door_b, door_c, bench],
    "main cabin":[door_b, double_bed, dresser],
    "boat deck":[door_c, dining_table,dinghy],
    "outside":[dinghy],
    "door a":[saloon_deck, shelter_deck],
    "door b":[shelter_deck, main_cabin],
    "door c":[shelter_deck, boat_deck],
    "dinghy":[boat_deck, outside],
    "piano":[key_a],
    "double bed":[key_c],
    "dresser":[key_dinghy],
    "bench":[key_b]
}


room_key_relation = {
    "saloon deck":[key_a],
    "shelter deck":[key_b],
    "main cabin":[key_c, key_dinghy],
    "boat deck":[]

}

BLUE    = "\033[0;34m"



# define game state. Do not directly change this dict.
# Instead, when a new game starts, make a copy of this
# dict and use the copy to store gameplay state. This
# way you can replay the game multiple times.

INIT_GAME_STATE = {
    #"current_room": main_cabin,
    "current_room": saloon_deck,
    "keys_collected": [],
    "target_room": outside
}

"""INIT_GAME_STATE = {
    "current_room": saloon_deck,
    #"current_room": '',
    "keys_collected": [],
    "target_room": outside
}"""



def linebreak():
    """
    Print a line break
    """
    print("\n\n")


def rock_game():
    import random
    options = ["rock", "paper", "scissors"]
    wins = 0
    while wins < 3:
        choice = input("choose rock, paper or scissors! ")
        choice_ghost = options[random.randint(0, 2)]
        if choice == "rock":
            if choice_ghost == "rock":
                print("ghost chose also rock, no win for you")
            elif choice_ghost == "paper":
                print("ghost chose paper, you loose")
            else:
                print("ghost chose scissors, you win!")
                wins += 1
        elif choice == "paper":
            if choice_ghost == "rock":
                print("ghost chose rock, you win!")
                wins += 1
            elif choice_ghost == "paper":
                print("ghost chose also paper, no win for you")
            else:
                print("ghost chose scissors, you loose!")
        elif choice == "scissors":
            if choice_ghost == "rock":
                print("ghost chose rock, you loose")
            elif choice_ghost == "paper":
                print("ghost chose paper, you win!")
                wins += 1
            else:
                print(BLUE+"ghost chose also scissors, no win for you!")
        else:
            print(BLUE+"please choose either rock, paper or scissors")




def start_game():
    """
    Start the game
    """
    print(BLUE+"You wake up on a couch and find yourself in the Tinanic. You don't remember embarking the cruise and what had happened before. There's water in the floor, there's an alarm that went off, the cruise is sinking! You have to get to the boat deck and find a dinghy, NOW!")
    print("")
    print(".")
    print("..")
    print("...")
    print("it looks like you were too slow! you feel the air becoming colder and colder as the room turns darker.")
    print("Suddenly you see something glowing green two metres from you. As you watch closer you realize its a spooky ghost")
    print("With a deep voice the ghost says: hello stranger, what are you doing in my home?")
    print("I only leave you alive if you win against me. Lets play rock, paper, scissors! You need to win three times!")
    rock_game()
    play_room(game_state["current_room"])


def play_room(room):
    """
    Play a room. First check if the room being played is the target room.
    If it is, the game will end with success. Otherwise, let player either
    explore (list all items in this room) or examine an item found here.
    """
    game_state["current_room"] = room
    if(game_state["current_room"] == game_state["target_room"]):
        print(BLUE+"Congrats! You escaped the room!")


    else:
        print(BLUE+"You are now in " + room["name"])
        intended_action = input("What would you like to do? explore or examine? ").strip()
        #intended_action = input(BLUE+"What would you like to do? explore or  examine? ").strip()
        if intended_action == "explore":
            explore_room(room)
            play_room(room)
        elif intended_action == "examine":
            examine_item(input("What would you like to examine?").strip())
        else:
            print(BLUE+"Not sure what you mean. Type 'explore' or 'examine'.")
            play_room(room)
        linebreak()

def explore_room(room):
    """
    Explore a room. List all items belonging to this room.
    """
    items = [i["name"] for i in object_relations[room["name"]]]
    print  ('\033[34m' + '\033[1m'"You explore the room. This is " + room["name"] + ". "'\033[34m' + '\033[1m'"You find " + ", ".join(items))

def get_next_room_of_door(door, current_room):
    """
    From object_relations, find the two rooms connected to the given door.
    Return the room that is not the current_room.
    """
    connected_rooms = object_relations[door["name"]]
    for room in connected_rooms:
        if(not current_room == room):
            return room

def examine_item(item_name):
    """
    Examine an item which can be a door or furniture.
    First make sure the intended item belongs to the current room.
    Then check if the item is a door. Tell player if key hasn't been
    collected yet. Otherwise ask player if they want to go to the next
    room. If the item is not a door, then check if it contains keys.
    Collect the key if found and update the game state. At the end,
    play either the current or the next room depending on the game state
    to keep playing.
    """
    current_room = game_state["current_room"]
    next_room = ""
    output = None

    for item in object_relations[current_room["name"]]:
        if(item["name"] == item_name):
            output = "You examine " + item_name + ". "
            if(item["type"] == "door"):
                have_key = False
                for key in game_state["keys_collected"]:
                    if(key["target"] == item):
                        have_key = True
                if(have_key):
                    output += BLUE+ "You unlock it with a key you have."
                    next_room = get_next_room_of_door(item, current_room)
                else:
                    output += BLUE +"It is locked but you don't have the key."
            else:
                if(item["name"] in object_relations and len(object_relations[item["name"]])>0):
                    item_found = object_relations[item["name"]].pop()
                    game_state["keys_collected"].append(item_found)
                    output += BLUE+"You find " + item_found["name"] + "."
                else:
                    output += BLUE+"There isn't anything interesting about it."
            print(output)
            break

    if(output is None):
        print(BLUE+"The item you requested is not found in the current room.")

    if(next_room and input("Do you want to go to the next room? Enter 'yes' or 'no'").strip() == 'yes'):
      #if(next_room and input("Do you want to go to the next room? Enter 'yes' or 'no'").strip() == 'yes'):
        play_room(next_room)
    else:
        play_room(current_room)



game_state = INIT_GAME_STATE.copy()

start_game()
